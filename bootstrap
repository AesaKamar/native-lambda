#!/bin/sh

set -euo pipefail

# Initialization - load function handler
echo "INITIALIZING: LAMBDA_TASK_ROOT: $LAMBDA_TASK_ROOT _HANDLER: $_HANDLER pwd: $(pwd) ls: $(ls -al)"
# source $LAMBDA_TASK_ROOT/"$(echo $_HANDLER | cut -d. -f1).sh"
echo $(cat /etc/os-release)

echo $(ls -al /usr/lib64)

export LD_LIBRARY_PATH="/var/task/lib:/opt/lib:${LD_LIBRARY_PATH}"

# Processing
while true
do
  echo "ABOUT TO INVOKE HANDLER"
  ./target/scala-2.11/main-out
  # HEADERS="$(mktemp)"
  # # Get an event
  # EVENT_DATA=$(curl -sS -LD "$HEADERS" -X GET "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/next")
  # REQUEST_ID=$(grep -Fi Lambda-Runtime-Aws-Request-Id "$HEADERS" | tr -d '[:space:]' | cut -d: -f2)
  # echo "HEADERS:"
  # cat "$HEADERS"
  # # echo "pwd: $(pwd)"
  # # echo "ls: $(ls -al)"
  # # echo "ls ./lib: $(ls -al ./lib)"
  # # echo "ls /opt/lib: $(ls -al /opt/lib)"
  # echo "INVOKING $_HANDLER"

  # # Execute the handler function from the script
  # # RESPONSE=$($(echo "$_HANDLER" | cut -d. -f2) "$EVENT_DATA")
  # export LD_LIBRARY_PATH="/var/task/lib:/opt/lib:${LD_LIBRARY_PATH}"
  # export EVENT_DATA
  # RESPONSE="$(./target/scala-2.11/main-out)"

  # echo $RESPONSE

  # # Send the response
  # curl -X POST "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/$REQUEST_ID/response"  -d "$RESPONSE"
done